// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: urlshortener.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UrlShortener_CreateShortLink_FullMethodName      = "/shortener.UrlShortener/CreateShortLink"
	UrlShortener_GetOriginalLink_FullMethodName      = "/shortener.UrlShortener/GetOriginalLink"
	UrlShortener_CreateLinksInBatches_FullMethodName = "/shortener.UrlShortener/CreateLinksInBatches"
	UrlShortener_GetAllShorterURLs_FullMethodName    = "/shortener.UrlShortener/GetAllShorterURLs"
	UrlShortener_DeleteURLS_FullMethodName           = "/shortener.UrlShortener/DeleteURLS"
	UrlShortener_PingDBConnection_FullMethodName     = "/shortener.UrlShortener/PingDBConnection"
	UrlShortener_GetStats_FullMethodName             = "/shortener.UrlShortener/GetStats"
)

// UrlShortenerClient is the client API for UrlShortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlShortenerClient interface {
	CreateShortLink(ctx context.Context, in *CreateShortLinkRequest, opts ...grpc.CallOption) (*CreateShortLinkResponse, error)
	GetOriginalLink(ctx context.Context, in *GetOriginalLinkRequest, opts ...grpc.CallOption) (*GetOriginalLinkResponse, error)
	CreateLinksInBatches(ctx context.Context, in *CreateLinksInBatchesRequest, opts ...grpc.CallOption) (*CreateLinksInBatchesResponse, error)
	GetAllShorterURLs(ctx context.Context, in *GetAllShorterURLsRequest, opts ...grpc.CallOption) (*GetAllShorterURLsResponse, error)
	DeleteURLS(ctx context.Context, in *DeleteURLSRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PingDBConnection(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingDBConnectionResponse, error)
	GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatsResponse, error)
}

type urlShortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlShortenerClient(cc grpc.ClientConnInterface) UrlShortenerClient {
	return &urlShortenerClient{cc}
}

func (c *urlShortenerClient) CreateShortLink(ctx context.Context, in *CreateShortLinkRequest, opts ...grpc.CallOption) (*CreateShortLinkResponse, error) {
	out := new(CreateShortLinkResponse)
	err := c.cc.Invoke(ctx, UrlShortener_CreateShortLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerClient) GetOriginalLink(ctx context.Context, in *GetOriginalLinkRequest, opts ...grpc.CallOption) (*GetOriginalLinkResponse, error) {
	out := new(GetOriginalLinkResponse)
	err := c.cc.Invoke(ctx, UrlShortener_GetOriginalLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerClient) CreateLinksInBatches(ctx context.Context, in *CreateLinksInBatchesRequest, opts ...grpc.CallOption) (*CreateLinksInBatchesResponse, error) {
	out := new(CreateLinksInBatchesResponse)
	err := c.cc.Invoke(ctx, UrlShortener_CreateLinksInBatches_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerClient) GetAllShorterURLs(ctx context.Context, in *GetAllShorterURLsRequest, opts ...grpc.CallOption) (*GetAllShorterURLsResponse, error) {
	out := new(GetAllShorterURLsResponse)
	err := c.cc.Invoke(ctx, UrlShortener_GetAllShorterURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerClient) DeleteURLS(ctx context.Context, in *DeleteURLSRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UrlShortener_DeleteURLS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerClient) PingDBConnection(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingDBConnectionResponse, error) {
	out := new(PingDBConnectionResponse)
	err := c.cc.Invoke(ctx, UrlShortener_PingDBConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerClient) GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, UrlShortener_GetStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlShortenerServer is the server API for UrlShortener service.
// All implementations must embed UnimplementedUrlShortenerServer
// for forward compatibility
type UrlShortenerServer interface {
	CreateShortLink(context.Context, *CreateShortLinkRequest) (*CreateShortLinkResponse, error)
	GetOriginalLink(context.Context, *GetOriginalLinkRequest) (*GetOriginalLinkResponse, error)
	CreateLinksInBatches(context.Context, *CreateLinksInBatchesRequest) (*CreateLinksInBatchesResponse, error)
	GetAllShorterURLs(context.Context, *GetAllShorterURLsRequest) (*GetAllShorterURLsResponse, error)
	DeleteURLS(context.Context, *DeleteURLSRequest) (*emptypb.Empty, error)
	PingDBConnection(context.Context, *emptypb.Empty) (*PingDBConnectionResponse, error)
	GetStats(context.Context, *emptypb.Empty) (*GetStatsResponse, error)
	mustEmbedUnimplementedUrlShortenerServer()
}

// UnimplementedUrlShortenerServer must be embedded to have forward compatible implementations.
type UnimplementedUrlShortenerServer struct {
}

func (UnimplementedUrlShortenerServer) CreateShortLink(context.Context, *CreateShortLinkRequest) (*CreateShortLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortLink not implemented")
}
func (UnimplementedUrlShortenerServer) GetOriginalLink(context.Context, *GetOriginalLinkRequest) (*GetOriginalLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginalLink not implemented")
}
func (UnimplementedUrlShortenerServer) CreateLinksInBatches(context.Context, *CreateLinksInBatchesRequest) (*CreateLinksInBatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLinksInBatches not implemented")
}
func (UnimplementedUrlShortenerServer) GetAllShorterURLs(context.Context, *GetAllShorterURLsRequest) (*GetAllShorterURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllShorterURLs not implemented")
}
func (UnimplementedUrlShortenerServer) DeleteURLS(context.Context, *DeleteURLSRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteURLS not implemented")
}
func (UnimplementedUrlShortenerServer) PingDBConnection(context.Context, *emptypb.Empty) (*PingDBConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingDBConnection not implemented")
}
func (UnimplementedUrlShortenerServer) GetStats(context.Context, *emptypb.Empty) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedUrlShortenerServer) mustEmbedUnimplementedUrlShortenerServer() {}

// UnsafeUrlShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlShortenerServer will
// result in compilation errors.
type UnsafeUrlShortenerServer interface {
	mustEmbedUnimplementedUrlShortenerServer()
}

func RegisterUrlShortenerServer(s grpc.ServiceRegistrar, srv UrlShortenerServer) {
	s.RegisterService(&UrlShortener_ServiceDesc, srv)
}

func _UrlShortener_CreateShortLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServer).CreateShortLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShortener_CreateShortLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServer).CreateShortLink(ctx, req.(*CreateShortLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortener_GetOriginalLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOriginalLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServer).GetOriginalLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShortener_GetOriginalLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServer).GetOriginalLink(ctx, req.(*GetOriginalLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortener_CreateLinksInBatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLinksInBatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServer).CreateLinksInBatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShortener_CreateLinksInBatches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServer).CreateLinksInBatches(ctx, req.(*CreateLinksInBatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortener_GetAllShorterURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllShorterURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServer).GetAllShorterURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShortener_GetAllShorterURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServer).GetAllShorterURLs(ctx, req.(*GetAllShorterURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortener_DeleteURLS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteURLSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServer).DeleteURLS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShortener_DeleteURLS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServer).DeleteURLS(ctx, req.(*DeleteURLSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortener_PingDBConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServer).PingDBConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShortener_PingDBConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServer).PingDBConnection(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortener_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShortener_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServer).GetStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UrlShortener_ServiceDesc is the grpc.ServiceDesc for UrlShortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UrlShortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortener.UrlShortener",
	HandlerType: (*UrlShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortLink",
			Handler:    _UrlShortener_CreateShortLink_Handler,
		},
		{
			MethodName: "GetOriginalLink",
			Handler:    _UrlShortener_GetOriginalLink_Handler,
		},
		{
			MethodName: "CreateLinksInBatches",
			Handler:    _UrlShortener_CreateLinksInBatches_Handler,
		},
		{
			MethodName: "GetAllShorterURLs",
			Handler:    _UrlShortener_GetAllShorterURLs_Handler,
		},
		{
			MethodName: "DeleteURLS",
			Handler:    _UrlShortener_DeleteURLS_Handler,
		},
		{
			MethodName: "PingDBConnection",
			Handler:    _UrlShortener_PingDBConnection_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _UrlShortener_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "urlshortener.proto",
}
